"Minipac
let minpac_exists=expand('~/.vim/pack/minpac/opt/minpac/README.md')

if !filereadable(minpac_exists)
  if !executable("git")
    echoerr "You have to install curl or first install minpac yourself!"
    execute "q!"
  endif
  echo "Installing Minpac..."
  echo ""
  silent !\git clone https://github.com/k-takata/minpac.git ~/.vim/pack/minpac/opt/minpac
endif

set nocompatible              " be iMproved, required
filetype off                  " required

call plugpac#begin()

Pack 'k-takata/minpac', {'type': 'opt'}

" Plugins
" 
" Start
" Pack 'editorconfig/editorconfig-vim'
Pack 'scrooloose/nerdtree'
Pack 'majutsushi/tagbar'
Pack 'vim-airline/vim-airline'
Pack 'vim-airline/vim-airline-themes'
Pack 'ctrlpvim/ctrlp.vim'
Pack 'tpope/vim-surround' "Surrounding plugin
Pack 'tpope/vim-unimpaired' "Unimpaired
Pack 'tpope/vim-commentary' "Add comment with gc
Pack 'tpope/vim-repeat' "Repeat plugin actions with .
Pack 'tpope/vim-speeddating' "Repeat plugin actions with .
Pack 'tpope/vim-dispatch' "Dispatch plugin
Pack 'jiangmiao/auto-pairs'
Pack 'nazo/pt.vim' "pt searcher plugin
Pack 'maralla/completor.vim'
Pack 'tokorom/completor-shell'
" Pack 'Shougo/deoplete.nvim'
" Pack 'Shougo/neosnippet.vim'
"

" Colorschemes
Pack 'drewtempelmeyer/palenight.vim'
Pack 'altercation/vim-colors-solarized', {'type':'opt'}
Pack 'tomasr/molokai', {'type':'opt'}

" Opt
" Pack 'fatih/vim-go', {'type':'opt','for': 'go'}
Pack 'airblade/vim-gitgutter' " shows git diff in the gutter
Pack 'tpope/vim-fugitive' " git branch
Pack 'fatih/vim-go'
Pack 'buoto/gotests-vim'
Pack 'godoctor/godoctor.vim' " go refactoring tool
Pack 'w0rp/ale' " lint plugin
Pack 'rodjek/vim-puppet' " puppet plugin
" Pack 'python-mode/python-mode'
Pack 'hashivim/vim-terraform' "Terraform integration
Pack 'lervag/vimtex' "Latex plugin. https://wikimatze.de/vimtex-the-perfect-tool-for-working-with-tex-and-vim/
Pack 'SirVer/ultisnips'
Pack 'honza/vim-snippets' " lint plugin
Pack 'JamshedVesuna/vim-markdown-preview', {'for': 'markdown'} "markdown plugin
" Pack 'guill/Conque-GDB'
Pack 'vimwiki/vimwiki', {'type':'opt'}
Pack 'sudar/vim-arduino-syntax', {'type':'opt'}
Pack 'aquach/vim-http-client', {'type': 'opt'} "HTTP Client

call plugpac#end()

syntax on

" Color
colorscheme palenight
" highlight Normal ctermbg=none

" Set the default file encoding to UTF-8:
set encoding=utf-8
set background=dark
set expandtab
set smarttab
set tabstop=4
set softtabstop=4
set shiftwidth=4
set showcmd	    	" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
set hidden          " Hide buffers when they are abandoned
set mouse=a		    " Enable mouse usage all modes
set guioptions+=a   " Enable x11 copy from visual select
set showmatch

" Show whitespace
set list
set listchars=tab:→\ ,trail:~,extends:>,precedes:<

" For full syntax highlighting:
let python_highlight_all=1

" Folding based on indentation:
set foldmethod=indent
set nofoldenable

" I like hitting tab and getting two spaces
autocmd BufRead,BufNewFile *.js,*.html,*.css set softtabstop=2

"set cursorline
set laststatus=2

" no beeps
set visualbell
"set ruler
"
" airline
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1

" Error and warning signs.
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

" delete trailing whitespace on save
func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.htm,*.html,*.css,*.js,*.php :call DeleteTrailingWS()


if has("autocmd")
  " Set File type to 'text' for files ending in .txt
  autocmd BufNewFile,BufRead *.txt setfiletype text
  " Uncomment the following to have Vim load indentation rules and plugins
  " according to the detected filetype.
  filetype plugin indent on

  " Use the below highlight group when displaying bad whitespace is desired.
  highlight BadWhitespace ctermbg=red guibg=red

  " Enable soft-wrapping for text files
  autocmd FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  " autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Automatically load .vimrc source when saved
  autocmd BufWritePost .vimrc source $MYVIMRC

  augroup END


  " Display tabs at the beginning of a line in Python mode as bad.
  au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
  " Make trailing whitespace be flagged as bad.
  au BufRead,BufNewFile *.py,*.pyw,*.c,*.h,*.pp match BadWhitespace /\s\+$/

  " Wrap text after a certain number of characters
  " Python: No limit
  " C: 79
  " Uncomment this if you want to limit your textwidth in python
  " can be very annoying ..
  " au BufRead,BufNewFile *.py,*.pyc set textwidth=79
  au BufRead,BufNewFile *.c,*.h set textwidth=79

  " Turn off settings in 'formatoptions' relating to comment formatting.
  " - c : do not automatically insert the comment leader when wrapping based on
  "    'textwidth'
  " - o : do not insert the comment leader when using 'o' or 'O' from command mode
  " - r : do not insert the comment leader when hitting <Enter> in insert mode
  " Python: not needed
  " C: prevents insertion of '*' at the beginning of every line in a comment
  au BufRead,BufNewFile *.c,*.h set formatoptions-=c formatoptions-=o formatoptions-=r

  " Use UNIX (\n) line endings.
  " Only used for new files so as to not force existing files to change their
  " line endings.
  " Python: yes
  " C: yes
  au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1

map <F9> :NERDTreeToggle<CR>
nnoremap <leader>a :cclose<CR>
"map <C-n> :MBEbn<CR>
"map <C-p> :MBEbp<CR>

" Buffer cycle
nnoremap <Tab> :bnext<CR>
nnoremap <S-Tab> :bprevious<CR>

" Snippets
" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<Tab>"
" let g:UltiSnipsJumpForwardTrigger="<c-m>" "default C-j"
" let g:UltiSnipsJumpBackwardTrigger="<c-n>" "default C-k"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"


" Don't use Ex mode, use Q for formatting
map Q gq

" Folding
nnoremap <space> za
vnoremap <space> zf
" unmap space in selection mode for snippets
sunmap <space>

" Toggle mouse
function! ToggleMouse()
    " check if mouse is enabled
    if &mouse == 'a'
        " disable mouse
        set mouse=c
    else
        " enable mouse everywhere
        set mouse=a
    endif
endfunc
nmap  \m :call ToggleMouse()<CR>


" Autocomplete
"
" disable YouCompleteMe tab for avoiding conflict with UltiSnipp
" let g:ycm_key_list_select_completion=[]
" let g:ycm_key_list_previous_completion=[]
"
" Use TAB to complete when typing words, else inserts TABs as usual.  Uses
" dictionary, source files, and completor to find matching words to complete.

" Note: usual completion is on <C-n> but more trouble to press all the time.
" Never type the same word twice and maybe learn a new spellings!
" Use the Linux dictionary when spelling is in doubt.
function! Tab_Or_Complete() abort
  " If completor is already open the `tab` cycles through suggested completions.
  if pumvisible()
    return "\<C-N>"
  " If completor is not open and we are in the middle of typing a word then
  " `tab` opens completor menu.
  elseif col('.')>1 && strpart( getline('.'), col('.')-2, 3 ) =~ '^\w'
    return "\<C-R>=completor#do('complete')\<CR>"
  else
    " If we aren't typing a word and we press `tab` simply do the normal `tab`
    " action.
    return "\<Tab>"
  endif
endfunction

" Use `tab` key to select completions.  Default is arrow keys.
" inoremap <expr> <Tab> pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

" Use tab to trigger auto completion.  Default suggests completions as you type.
" let g:completor_auto_trigger = 0
" inoremap <expr> <Tab> Tab_Or_Complete()



" Markdown preview key
let vim_markdown_preview_hotkey='<C-o>'

" Latex viewer
" let g:vimtex_view_general_viewer = "evince"
let g:vimtex_view_method = 'zathura'

" Completor
let g:completor_python_binary = '/usr/bin/python3'

" always trim trailing whitespace .. is there ever a good reason?
" autocmd BufWritePre * :%s/\s\+$//e

" for things that are particular to this user/computer,
" you can add commands to a .local_vim file in your home dir
" and uncommenting the following
" source .local_vim"
